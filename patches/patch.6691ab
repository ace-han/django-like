diff --git a/django/db/backends/mysql/base.py b/django/db/backends/mysql/base.py
index d760418..489b67e 100644
--- a/django/db/backends/mysql/base.py
+++ b/django/db/backends/mysql/base.py
@@ -391,6 +391,8 @@ class DatabaseWrapper(BaseDatabaseWrapper):
         'endswith': 'LIKE BINARY %s',
         'istartswith': 'LIKE %s',
         'iendswith': 'LIKE %s',
+        'like': 'LIKE BINARY %s',
+        'ilike': 'LIKE %s',
     }
 
     Database = Database
diff --git a/django/db/backends/oracle/base.py b/django/db/backends/oracle/base.py
index 46f89ff..8f616bb 100644
--- a/django/db/backends/oracle/base.py
+++ b/django/db/backends/oracle/base.py
@@ -280,7 +280,8 @@ WHEN (new.%(col_name)s IS NULL)
         return cursor.fetchone()[0]
 
     def lookup_cast(self, lookup_type):
-        if lookup_type in ('iexact', 'icontains', 'istartswith', 'iendswith'):
+        if lookup_type in ('iexact', 'icontains', 'istartswith',
+                           'iendswith', 'ilike'):
             return "UPPER(%s)"
         return "%s"
 
@@ -501,6 +502,8 @@ class DatabaseWrapper(BaseDatabaseWrapper):
         'endswith': "LIKE TRANSLATE(%s USING NCHAR_CS) ESCAPE TRANSLATE('\\' USING NCHAR_CS)",
         'istartswith': "LIKE UPPER(TRANSLATE(%s USING NCHAR_CS)) ESCAPE TRANSLATE('\\' USING NCHAR_CS)",
         'iendswith': "LIKE UPPER(TRANSLATE(%s USING NCHAR_CS)) ESCAPE TRANSLATE('\\' USING NCHAR_CS)",
+        'like': "LIKE TRANSLATE(%s USING NCHAR_CS) ESCAPE TRANSLATE('\\' USING NCHAR_CS)",
+        'ilike': "LIKE UPPER(TRANSLATE(%s USING NCHAR_CS)) ESCAPE TRANSLATE('\\' USING NCHAR_CS)",
     }
 
     _likec_operators = _standard_operators.copy()
diff --git a/django/db/backends/postgresql_psycopg2/base.py b/django/db/backends/postgresql_psycopg2/base.py
index 6ed2cfc..5d515cb 100644
--- a/django/db/backends/postgresql_psycopg2/base.py
+++ b/django/db/backends/postgresql_psycopg2/base.py
@@ -69,6 +69,8 @@ class DatabaseWrapper(BaseDatabaseWrapper):
         'endswith': 'LIKE %s',
         'istartswith': 'LIKE UPPER(%s)',
         'iendswith': 'LIKE UPPER(%s)',
+        'like': 'LIKE %s',
+        'ilike': 'LIKE UPPER(%s)',
     }
 
     Database = Database
diff --git a/django/db/backends/postgresql_psycopg2/operations.py b/django/db/backends/postgresql_psycopg2/operations.py
index c5aab84..e63aa86 100644
--- a/django/db/backends/postgresql_psycopg2/operations.py
+++ b/django/db/backends/postgresql_psycopg2/operations.py
@@ -73,7 +73,8 @@ class DatabaseOperations(BaseDatabaseOperations):
             lookup = "%s::text"
 
         # Use UPPER(x) for case-insensitive lookups; it's faster.
-        if lookup_type in ('iexact', 'icontains', 'istartswith', 'iendswith'):
+        if lookup_type in ('iexact', 'icontains',
+                           'istartswith', 'iendswith', 'ilike'):
             lookup = 'UPPER(%s)' % lookup
 
         return lookup
diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py
index 96b0314..558edc4 100644
--- a/django/db/backends/sqlite3/base.py
+++ b/django/db/backends/sqlite3/base.py
@@ -299,6 +299,8 @@ class DatabaseWrapper(BaseDatabaseWrapper):
         'endswith': "LIKE %s ESCAPE '\\'",
         'istartswith': "LIKE %s ESCAPE '\\'",
         'iendswith': "LIKE %s ESCAPE '\\'",
+        'like': "LIKE %s ESCAPE '\\'",
+        'ilike': "LIKE %s ESCAPE '\\'",
     }
 
     Database = Database
diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index adb07cf..b3b39d3 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -363,6 +363,7 @@ class Field(object):
                 'startswith', 'istartswith', 'endswith', 'iendswith',
                 'month', 'day', 'week_day', 'hour', 'minute', 'second',
                 'isnull', 'search', 'regex', 'iregex',
+                'like', 'ilike',
             ):
             return value
         elif lookup_type in ('exact', 'gt', 'gte', 'lt', 'lte'):
@@ -400,7 +401,8 @@ class Field(object):
             return QueryWrapper(('(%s)' % sql), params)
 
         if lookup_type in ('month', 'day', 'week_day', 'hour', 'minute',
-                           'second', 'search', 'regex', 'iregex'):
+                           'second', 'search', 'regex', 'iregex',
+                           'like', 'ilike'):
             return [value]
         elif lookup_type in ('exact', 'gt', 'gte', 'lt', 'lte'):
             return [self.get_db_prep_value(value, connection=connection,
diff --git a/django/db/models/sql/constants.py b/django/db/models/sql/constants.py
index 904f7b2..4861cb5 100644
--- a/django/db/models/sql/constants.py
+++ b/django/db/models/sql/constants.py
@@ -12,7 +12,7 @@ QUERY_TERMS = set([
     'exact', 'iexact', 'contains', 'icontains', 'gt', 'gte', 'lt', 'lte', 'in',
     'startswith', 'istartswith', 'endswith', 'iendswith', 'range', 'year',
     'month', 'day', 'week_day', 'hour', 'minute', 'second', 'isnull', 'search',
-    'regex', 'iregex',
+    'regex', 'iregex', 'like', 'ilike'
 ])
 
 # Size of each "chunk" for get_iterator calls.
